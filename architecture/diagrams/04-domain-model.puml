@startuml ViveMedellin_Domain_Model
!theme plain

title Modelo de Dominio - ViveMedellin (Nivel C√≥digo C4)

' Entidades Principales
class Evento {
    -Long id <<PK>>
    -String nombre {NotBlank}
    -String descripcion
    -LocalDateTime fecha {Future}
    -String ubicacion {NotBlank}
    -CategoriaEvento categoria
    -BigDecimal precio {Positive}
    -String organizador
    -Boolean activo = true
    -Boolean destacado = false
    -LocalDateTime fechaCreacion {CreationTimestamp}
    -LocalDateTime fechaActualizacion {UpdateTimestamp}
    --
    +crearEvento(datos: EventoDTO): Evento
    +actualizar(datos: EventoDTO): void
    +destacar(): void
    +cancelar(): void {SoftDelete}
    +estaActivo(): Boolean
    +esDestacado(): Boolean
    +calcularCapacidadTotal(): Integer
}

class Usuario {
    -Long id <<PK>>
    -String nombre {NotBlank, Size(2,100)}
    -String email {Email, Unique}
    -String telefono {Pattern}
    -TipoUsuario tipo = CIUDADANO
    -Boolean activo = true
    -LocalDateTime fechaRegistro {CreationTimestamp}
    --
    +registrar(datos: UsuarioDTO): Usuario
    +actualizar(datos: UsuarioDTO): void
    +desactivar(): void {SoftDelete}
    +cambiarTipo(nuevoTipo: TipoUsuario): void
    +puedeGestionarEventos(): Boolean
    +esAdministrador(): Boolean
}

class Funcion {
    -Long id <<PK>>
    -Long eventoId <<FK>>
    -LocalDateTime fecha {Future}
    -Integer capacidad {Positive}
    -Integer entradasVendidas = 0
    -BigDecimal precio {PositiveOrZero}
    -Boolean activa = true
    --
    +crear(eventoId: Long, datos: FuncionDTO): Funcion
    +venderEntrada(): Boolean
    +cancelarEntrada(): void
    +verificarDisponibilidad(): Boolean
    +calcularPorcentajeOcupacion(): Double
    +estaCompleta(): Boolean
}

class Valoracion {
    -Long id <<PK>>
    -Long eventoId <<FK>>
    -Long usuarioId <<FK>>
    -Integer puntuacion {Min(1), Max(5)}
    -String comentario {Size(max=500)}
    -LocalDateTime fecha {CreationTimestamp}
    --
    +crear(datos: ValoracionDTO): Valoracion
    +actualizar(nuevaData: ValoracionDTO): void
    +eliminar(): void
    +esValida(): Boolean
}

class Comentario {
    -Long id <<PK>>
    -Long eventoId <<FK>>
    -Long usuarioId <<FK>>
    -String contenido {NotBlank, Size(max=1000)}
    -LocalDateTime fecha {CreationTimestamp}
    -Boolean aprobado = false
    --
    +crear(datos: ComentarioDTO): Comentario
    +aprobar(): void
    +rechazar(): void
    +requiereModeracion(): Boolean
}

class Notificacion {
    -Long id <<PK>>
    -Long usuarioId <<FK>>
    -String titulo {NotBlank, Size(max=100)}
    -String mensaje {NotBlank, Size(max=500)}
    -TipoNotificacion tipo
    -Boolean leida = false
    -LocalDateTime fecha {CreationTimestamp}
    -LocalDateTime fechaEnvio
    --
    +enviar(): void
    +marcarLeida(): void
    +esReciente(): Boolean
    +requiereAcknowledgment(): Boolean
}

class Organizador {
    -Long id <<PK>>
    -String nombre {NotBlank}
    -String contacto {Email}
    -String descripcion
    -Boolean verificado = false
    -LocalDateTime fechaRegistro {CreationTimestamp}
    --
    +verificar(): void
    +actualizar(datos: OrganizadorDTO): void
    +puedeCrearEventos(): Boolean
    +calcularReputacion(): Double
}

class Ubicacion {
    -Long id <<PK>>
    -String nombre {NotBlank}
    -String direccion {NotBlank}
    -Double latitud {DecimalMin, DecimalMax}
    -Double longitud {DecimalMin, DecimalMax}
    -Integer capacidad {Positive}
    --
    +geocodificar(direccion: String): Coordenadas
    +calcularDistancia(otra: Ubicacion): Double
    +estaEnRadio(punto: Coordenadas, radio: Double): Boolean
    +obtenerZona(): String
}

class Grupo {
    -Long id <<PK>>
    -String nombre {NotBlank, Size(max=100)}
    -String descripcion {Size(max=500)}
    -Long creadorId <<FK>>
    -Integer cantidadMiembros = 0
    -LocalDateTime fechaCreacion {CreationTimestamp}
    -Boolean activo = true
    --
    +crear(creadorId: Long, datos: GrupoDTO): Grupo
    +agregarMiembro(usuarioId: Long): void
    +removerMiembro(usuarioId: Long): void
    +esCreador(usuarioId: Long): Boolean
    +puedeUnirse(usuario: Usuario): Boolean
}

' Enumeraciones
enum CategoriaEvento {
    MUSICA("M√∫sica", "üéµ")
    GASTRONOMIA("Gastronom√≠a", "üç¥")
    DEPORTE("Deporte", "‚öΩ")
    CULTURA("Cultura", "üé≠")
    TECNOLOGIA("Tecnolog√≠a", "üíª")
    ARTE("Arte", "üé®")
    EDUCACION("Educaci√≥n", "üìö")
    NEGOCIOS("Negocios", "üíº")
    --
    -String displayName
    -String icono
    +getDisplayName(): String
    +getIcono(): String
}

enum TipoUsuario {
    CIUDADANO("Ciudadano", 1)
    ORGANIZADOR("Organizador", 2) 
    ADMINISTRADOR("Administrador", 3)
    --
    -String nombre
    -Integer nivel
    +puedeGestionar(recurso: String): Boolean
    +tieneNivelSuperior(otro: TipoUsuario): Boolean
}

enum TipoNotificacion {
    NUEVO_EVENTO("Nuevo Evento Disponible")
    RECORDATORIO("Recordatorio de Evento")
    CONFIRMACION("Confirmaci√≥n de Acci√≥n")
    PROMOCION("Evento Promocionado")
    SISTEMA("Notificaci√≥n del Sistema")
    --
    -String descripcion
    +requiereAccion(): Boolean
    +esCritica(): Boolean
}

' Relaciones Principales
Evento ||--o{ Funcion : "evento_funciones"
Evento ||--o{ Valoracion : "evento_valoraciones"
Evento ||--o{ Comentario : "evento_comentarios"
Evento }o--|| Organizador : "organizado_por"
Evento }o--|| Ubicacion : "se_realiza_en"

Usuario ||--o{ Valoracion : "usuario_valoraciones"
Usuario ||--o{ Comentario : "usuario_comentarios"
Usuario ||--o{ Notificacion : "usuario_notificaciones"
Usuario ||--o{ Grupo : "usuario_grupos"

' Relaciones con Enums
Evento --> CategoriaEvento : categoria
Usuario --> TipoUsuario : tipo
Notificacion --> TipoNotificacion : tipo

' Entidades de Apoyo
class EventoUsuario {
    -Long eventoId <<FK>>
    -Long usuarioId <<FK>>
    -EstadoParticipacion estado
    -LocalDateTime fechaInscripcion
    -Boolean notificacionesHabilitadas = true
    --
    +inscribir(): void
    +cancelarInscripcion(): void
    +cambiarEstado(nuevo: EstadoParticipacion): void
}

enum EstadoParticipacion {
    INTERESADO
    CONFIRMADO
    ASISTIO
    NO_ASISTIO
    CANCELADO
}

Usuario ||--o{ EventoUsuario : "participaciones"
Evento ||--o{ EventoUsuario : "participantes"
EventoUsuario --> EstadoParticipacion

' Agregados y Value Objects
class Coordenadas <<ValueObject>> {
    -Double latitud
    -Double longitud
    --
    +distanciaA(otra: Coordenadas): Double
    +enRadioDe(centro: Coordenadas, km: Double): Boolean
}

class Periodo <<ValueObject>> {
    -LocalDateTime inicio
    -LocalDateTime fin
    --
    +duracion(): Duration
    +contiene(momento: LocalDateTime): Boolean
    +solapa(otro: Periodo): Boolean
}

Ubicacion --> Coordenadas : coordenadas
Evento --> Periodo : periodo_evento

' Notas de Dise√±o
note top of Evento : "Entidad ra√≠z del agregado Evento\nImplementa soft delete\nSoporte para destacar eventos"

note right of Usuario : "Gesti√≥n de diferentes tipos\nSoporte para roles y permisos\nSoft delete implementado"

note bottom of Valoracion : "Constraint: un usuario\nsolo puede valorar\nuna vez por evento"

note left of Notificacion : "Sistema de notificaciones\ncon diferentes tipos\ny estados de lectura"

@enduml