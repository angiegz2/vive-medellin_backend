@startuml C4_Complete_ViveMedellin
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Context.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title Arquitectura Completa C4 - Plataforma ViveMedellin

' ================== NIVEL 1: CONTEXTO ==================
Person(ciudadano, "Ciudadano de Medellín", "Usuario que busca y participa en eventos locales")
Person(organizador, "Organizador de Eventos", "Crea y gestiona eventos en la plataforma")
Person(admin, "Administrador", "Gestiona la plataforma y supervisa contenido")

System_Ext(email_sys, "Sistema de Email", "SendGrid/AWS SES")
System_Ext(payment_sys, "Pasarela de Pagos", "Stripe/PayU Colombia") 
System_Ext(maps_sys, "Google Maps API", "Geolocalización")
System_Ext(social_sys, "Redes Sociales", "Facebook, Instagram, Twitter")

' ================== NIVEL 2: CONTENEDORES ==================
System_Boundary(vivemedellin, "Plataforma ViveMedellin") {
    
    ' Frontend Containers
    Container(web_app, "Web Application", "React.js + TypeScript", "Interface web responsive para usuarios")
    Container(mobile_app, "Mobile App", "React Native", "Aplicación nativa iOS/Android")
    Container(admin_panel, "Admin Panel", "React.js + Material-UI", "Panel administrativo avanzado")
    
    ' Backend Containers
    Container(api_gateway, "API Gateway", "Spring Cloud Gateway", "Enrutamiento y autenticación")
    
    ' ================== NIVEL 3: COMPONENTES BACKEND ==================
    Container_Boundary(backend_api, "Backend API - Spring Boot 3.5.6") {
        
        ' Controllers
        Component(evento_ctrl, "EventoController", "Spring @RestController", "API REST eventos")
        Component(usuario_ctrl, "UsuarioController", "Spring @RestController", "API REST usuarios")
        Component(valoracion_ctrl, "ValoracionController", "Spring @RestController", "API REST valoraciones")
        Component(notif_ctrl, "NotificacionController", "Spring @RestController", "API REST notificaciones")
        
        ' Services
        Component(evento_svc, "EventoService", "Spring @Service", "Lógica de negocio eventos")
        Component(usuario_svc, "UsuarioService", "Spring @Service", "Lógica de negocio usuarios")
        Component(valoracion_svc, "ValoracionService", "Spring @Service", "Lógica valoraciones")
        Component(search_svc, "SearchService", "Spring @Service", "Búsqueda avanzada")
        Component(notif_svc, "NotificationService", "Spring @Service", "Gestión notificaciones")
        
        ' Repositories
        Component(evento_repo, "EventoRepository", "Spring Data JPA", "Acceso datos eventos")
        Component(usuario_repo, "UsuarioRepository", "Spring Data JPA", "Acceso datos usuarios")
        Component(valoracion_repo, "ValoracionRepository", "Spring Data JPA", "Acceso valoraciones")
        Component(funcion_repo, "FuncionRepository", "Spring Data JPA", "Acceso funciones")
        
        ' Configuration
        Component(security_config, "SecurityConfig", "Spring Security", "JWT + CORS")
        Component(swagger_config, "OpenAPIConfig", "SpringDoc", "Documentación automática")
        Component(exception_handler, "ExceptionHandler", "Spring @ControllerAdvice", "Manejo errores")
    }
    
    ' Microservices
    Container(auth_service, "Auth Service", "Spring Security + JWT", "Autenticación y autorización")
    Container(notification_service, "Notification Service", "Spring Boot + WebSocket", "Notificaciones tiempo real")
    
    ' Storage
    Container(file_storage, "File Storage", "MinIO/AWS S3", "Imágenes y documentos")
}

' ================== PERSISTENCIA ==================
ContainerDb(postgresql, "PostgreSQL 18", "Base de Datos Principal", "Almacenamiento ACID")
ContainerDb(redis, "Redis Cluster", "Cache Distribuido", "Sesiones y cache")
ContainerDb(elasticsearch, "Elasticsearch", "Motor de Búsqueda", "Índices optimizados")

' ================== RELACIONES USUARIOS ==================
Rel(ciudadano, web_app, "Busca eventos, valora", "HTTPS")
Rel(ciudadano, mobile_app, "App móvil nativa", "HTTPS")
Rel(organizador, web_app, "Gestiona eventos", "HTTPS")
Rel(admin, admin_panel, "Administra plataforma", "HTTPS")

' ================== RELACIONES FRONTEND - GATEWAY ==================
Rel(web_app, api_gateway, "Consume APIs", "HTTPS/JSON")
Rel(mobile_app, api_gateway, "REST API calls", "HTTPS/JSON") 
Rel(admin_panel, api_gateway, "Admin APIs", "HTTPS/JSON")

' ================== GATEWAY - SERVICES ==================
Rel(api_gateway, evento_ctrl, "Enruta /api/eventos/*", "HTTP")
Rel(api_gateway, usuario_ctrl, "Enruta /api/usuarios/*", "HTTP")
Rel(api_gateway, auth_service, "Validación JWT", "HTTP")
Rel(api_gateway, notification_service, "Notificaciones", "HTTP")

' ================== CONTROLLERS - SERVICES ==================
Rel(evento_ctrl, evento_svc, "Delegación lógica", "Java")
Rel(usuario_ctrl, usuario_svc, "Gestión usuarios", "Java")
Rel(valoracion_ctrl, valoracion_svc, "Procesa valoraciones", "Java")
Rel(notif_ctrl, notif_svc, "Envía notificaciones", "Java")

' ================== SERVICES - REPOSITORIES ==================
Rel(evento_svc, evento_repo, "CRUD eventos", "JPA")
Rel(evento_svc, funcion_repo, "Gestiona funciones", "JPA")
Rel(usuario_svc, usuario_repo, "CRUD usuarios", "JPA")
Rel(valoracion_svc, valoracion_repo, "CRUD valoraciones", "JPA")

' ================== INTER-SERVICE COMMUNICATION ==================
Rel(evento_svc, search_svc, "Indexa eventos", "Java")
Rel(evento_svc, notif_svc, "Notifica nuevo evento", "Java")
Rel(usuario_svc, notif_svc, "Notifica registro", "Java")

' ================== REPOSITORIES - DATABASE ==================
Rel(evento_repo, postgresql, "SQL eventos", "JDBC")
Rel(usuario_repo, postgresql, "SQL usuarios", "JDBC")
Rel(valoracion_repo, postgresql, "SQL valoraciones", "JDBC")
Rel(funcion_repo, postgresql, "SQL funciones", "JDBC")

' ================== CACHE LAYER ==================
Rel(evento_svc, redis, "Cache eventos populares", "Redis Protocol")
Rel(usuario_svc, redis, "Cache perfiles", "Redis Protocol")
Rel(auth_service, redis, "Cache sesiones JWT", "Redis Protocol")

' ================== SEARCH ENGINE ==================
Rel(search_svc, elasticsearch, "Indexa/Busca eventos", "HTTP/JSON")

' ================== EXTERNAL SERVICES ==================
Rel(notification_service, email_sys, "Envía emails", "SMTP/API")
Rel(evento_svc, payment_sys, "Procesa pagos", "HTTPS/API")
Rel(evento_svc, maps_sys, "Geocodifica direcciones", "HTTPS/API")
Rel(notification_service, social_sys, "Comparte eventos", "HTTPS/API")
Rel(evento_svc, file_storage, "Gestiona imágenes", "S3 API")

' ================== CROSS-CUTTING CONCERNS ==================
Rel(security_config, auth_service, "Configuración JWT", "Spring")
Rel(exception_handler, evento_ctrl, "Maneja excepciones", "AOP")
Rel(swagger_config, evento_ctrl, "Documentación API", "Annotations")

' ================== NIVEL 4: MODELO DE DOMINIO (Representación) ==================
note top of postgresql : "🏗️ MODELO DE DOMINIO\n━━━━━━━━━━━━━━━━━━━━\n📋 Evento (entidad principal)\n├── id, nombre, descripción\n├── fecha, ubicación, precio\n├── categoria (enum), organizador\n├── activo, destacado (flags)\n└── timestamps automáticos\n\n👤 Usuario\n├── id, nombre, email, teléfono\n├── tipo (CIUDADANO|ORGANIZADOR|ADMIN)\n├── activo (soft delete)\n└── fechaRegistro\n\n⭐ Valoracion\n├── eventoId, usuarioId\n├── puntuación (1-5), comentario\n└── fecha\n\n🎪 Función\n├── eventoId, fecha, capacidad\n├── entradasVendidas, precio\n└── activa\n\n📢 Notificación\n├── usuarioId, titulo, mensaje\n├── tipo (enum), leída\n└── fecha\n\n🏢 Organizador\n├── nombre, contacto, descripción\n└── verificado\n\n📍 Ubicación\n├── nombre, dirección\n├── latitud, longitud\n└── capacidad"

' ================== ANNOTATIONS ==================
note right of vivemedellin : "🎯 CARACTERÍSTICAS CLAVE\n━━━━━━━━━━━━━━━━━━━━━━\n✅ CRUD Completo\n✅ Soft Delete (eventos)\n✅ Sistema Valoraciones\n✅ Búsqueda Avanzada\n✅ Cache Distribuido\n✅ Notificaciones Real-time\n✅ Multi-perfil (dev/prod)\n✅ Documentación Swagger\n✅ JWT Authentication\n✅ Geolocalización\n✅ Sistema de Pagos"

note left of postgresql : "🚀 STACK TECNOLÓGICO\n━━━━━━━━━━━━━━━━━━━\n📱 Frontend: React.js + React Native\n🖥️ Backend: Spring Boot 3.5.6\n☕ Runtime: Java 21/23\n🗄️ Database: PostgreSQL 18\n⚡ Cache: Redis Cluster\n🔍 Search: Elasticsearch\n🔐 Security: Spring Security + JWT\n📚 API Docs: SpringDoc OpenAPI\n🐳 Container: Docker Ready\n☁️ Cloud: AWS/Azure Ready"

SHOW_LEGEND()

@enduml